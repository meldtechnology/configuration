spring:
  application:
    name: user-service-lib
  r2dbc:
    url: r2dbc:postgresql://${DB_HOST}?user_service?serverTimezone=UTC&useLegacyDatetimeCode=false
    name: user_service
    username: ${USER_NAME}
    password: ${PASSWORD}
  devtools:
    restart.enabled: true
  pool:
    enabled: true

  cloud:
    function:
      definition: mailing; setting
    stream:
      bindings:
        mailing-out-0:
          destination: mailing-send
        userIndustry-out-0:
          destination: userIndustry
        setting-in-0:
          destination: notice-setting
  rabbitmq:
    host: ${BROKER_HOST}
    port: 5672
    username: guest

email:
  activation:
    template: d-3eca4131b71949989a5d9ee7b1993511
  password-reset:
    template: d-1a0862c51bcd47dbabae68a3fa380967

meld:
  scheduler:
    token:
      cleanup: '0 0 */3 * * ?'
    otp:
      cleanup: '0 0 * * * ?'

oauth2:
  client:
    id: ${CLIENT_ID}
    secret: ${CLIENT_SECRET}

  authorize:
    url: ${ISSUER_HOST}/oauth2/authorize
    scope: ${SCOPE}
    challengeMethod: S256

  authorization:
    url: ${ISSUER_HOST}/oauth2/token
    grant_type: authorization_code
    redirect_uri: ${REDIRECT_URL}

  logout:
    url: ${ISSUER_HOST}/logout

cloudinary:
  cloud-name: ${CLOUD_NAME}
  api-key: ${API_KEY}
  api-secret: ${API_SECRET}

logging:
  level:
    root: ${ROOT_LOG_LEVEL}

