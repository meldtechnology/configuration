spring:
  application:
    name: user-service-lib
  r2dbc:
    url: r2dbc:postgresql://${DB_HOST}?${USER_DB}_service?serverTimezone=UTC&useLegacyDatetimeCode=false
    name: ${USER_DB}_service
    username: "{cipher}8283992cfdd36c80d5865a47922662fc5551b7522d5b0010aae0393a09a90bf8"
    password: "{cipher}7bb75a1d16f037829e7507739a950be52ca01ab16268bf48d81e7962daee6e20"
  devtools:
    restart.enabled: true
  pool:
    enabled: true

  cloud:
    function:
      definition: mailing; setting
    stream:
      bindings:
        mailing-out-0:
          destination: mailing-send
        userIndustry-out-0:
          destination: userIndustry
        setting-in-0:
          destination: notice-setting
  rabbitmq:
    host: ${BROKER_HOST}
    port: 5672
    username: guest

email:
  activation:
    template: d-8f99893246b946b090b8f860e9f3f222
  password-reset:
    template: d-1a0862c51bcd47dbabae68a3fa380967

meld:
  scheduler:
    token:
      cleanup: '0 0 */3 * * ?'
    otp:
      cleanup: '0 0 * * * ?'

oauth2:
  client:
    id: "{cipher}d3242bdde7c9024fb963ec6e9b644d0bd9b0d613bd8ace1007e87e9a0e888512a54b9c2c0d9c96fa06bb2a58ba1abe6fee7f5dcf95afd3da54bd13c3df6c5415"
    secret:  "{cipher}0a737da608e28c5291b75c297c8bba13676c9059b2537883ca5180809abc2dd9"

  authorize:
    url: ${ISSUER_HOST}/oauth2/authorize
    scope: ${SCOPE}
    challengeMethod: S256

  authorization:
    url: ${ISSUER_HOST}/oauth2/token
    grant_type: authorization_code
    redirect_uri: ${REDIRECT_URL}

  logout:
    url: ${ISSUER_HOST}/logout

cloudinary:
  cloud-name: "{cipher}8983718db7b86f9c705103f0e1e7ff52cb260de1269cfddfe3d6e6483816c292"
  api-key: "{cipher}d040cb0b61a270e1d00be3e6cfbaba94037c92d4c278030ce8bf41b8e70d3fd3"
  api-secret: "{cipher}e66d5a1b4e5de8d26ed5d1fb170d0c221adc162735363560ff136fb37c7e9a60120ba45aff9f0ecc6c7d8cd75c270f00"

logging:
  level:
    root: ${ROOT_LOG_LEVEL}

